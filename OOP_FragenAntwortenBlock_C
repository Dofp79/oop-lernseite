<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Block C â€“ Kontrollstrukturen und Variablen</title>
    <style>
        /* Seitenlayout */
        body {
            font-family: Calibri, sans-serif;
            margin: 40px;
            line-height: 1.6;
            background-color: #f4f4f4;
            color: #333;
        }

        /* Hauptcontainer fÃ¼r alle Inhalte */
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        /* Optionales Logo im Kopfbereich */
        .logo-container {
            text-align: center;
            margin-bottom: 20px;
        }

        .logo {
            max-width: 140px;
            display: block;
            margin: 0 auto;
            border-radius: 20px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            background-color: #f4f4f4;
            transition: transform 0.3s ease;
        }

        .logo:hover {
            transform: scale(1.03);
        }

        /* Ãœberschriften */
        h1 {
            color: #0F4391;
            text-align: center;
            margin-top: 30px;
        }

        h2 {
            color: #0F4391;
        }

        /* AntwortblÃ¶cke im Code-Stil */
        pre {
            background: #272822;
            color: #f8f8f2;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
        }

        /* Navigationsbereich fÃ¼r Buttons */
        .button-container {
            text-align: center;
            margin-top: 40px;
        }

        .nav-button {
            display: inline-block;
            padding: 10px 20px;
            margin: 10px;
            font-size: 16px;
            background-color: #0F4391;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

        .nav-button:hover {
            background-color: #09306b;
        }
    </style>
</head>
<body>

<div class="container">

    <!-- Logo (optional) -->
    <div class="logo-container">
        <img src="Bombillo.png" alt="Logo" class="logo">
    </div>

    <h1>Block C â€“ Kontrollstrukturen und Variablen (Fragen 11â€“18)</h1>

    <h2>11. In welchem Zusammenhang stehen BlÃ¶cke und GÃ¼ltigkeitsbereiche einer Variable?</h2>
    <pre>
Der GÃ¼ltigkeitsbereich einer Variablen richtet sich nach dem Block, in dem sie deklariert wurde.
Variablen sind nur innerhalb des Blocks sichtbar, in dem sie definiert wurden (z.â€¯B. innerhalb einer Methode oder Schleife).
ğŸ“˜ Lektion: 16.1 â€“ Sichtbarkeit und Variablen | ğŸ“„ Seite: 150â€“151
    </pre>

    <h2>12. Welche Schleifen gibt es in Java und wie unterscheiden sie sich?</h2>
    <pre>
Java kennt drei Haupt-Schleifen:
- for â†’ wenn Anzahl der DurchlÃ¤ufe bekannt ist
- while â†’ wenn vorher geprÃ¼ft wird, ob Bedingung erfÃ¼llt ist
- do-while â†’ wenn Schleifendurchlauf mindestens einmal stattfinden soll
ğŸ“˜ Lektion: 12.1 â€“ Kontrollstrukturen | ğŸ“„ Seite: 115â€“117
    </pre>

    <h2>13. Welche Variablenrollen haben wir kennengelernt?</h2>
    <pre>
Typische Variablenrollen:
- stepper: zÃ¤hlt SchleifendurchlÃ¤ufe
- follower: verfolgt andere Werte
- mostWanted: speichert Maximum/Minimum
- gatherer: summiert Werte
- temp: temporÃ¤re Speicherung
- flag: boolescher Kontrollwert
- final: Konstante
ğŸ“˜ Lektion: 13 â€“ Variablenrollen & Namenskonventionen | ğŸ“„ Seite: 123â€“125
    </pre>

    <h2>14. Was ist der Unterschied zwischen Wert- und Verweisvariablen?</h2>
    <pre>
- Wertvariablen: speichern direkte Werte (z.â€¯B. int x = 5;)
- Verweisvariablen: speichern Speicheradressen auf Objekte (z.â€¯B. Person p = new Person();)
ğŸ“˜ Lektion: 17.3 â€“ Referenzen & Objektvergleiche | ğŸ“„ Seite: 163â€“164
    </pre>

    <h2>15. Wie funktioniert ein Konstruktor?</h2>
    <pre>
Ein Konstruktor ist eine spezielle Methode zur Initialisierung eines Objekts.
Er hat denselben Namen wie die Klasse, besitzt keinen RÃ¼ckgabewert und wird mit 'new' aufgerufen.
ğŸ“˜ Lektion: 17.2 â€“ Konstruktoren | ğŸ“„ Seite: 161â€“162
    </pre>

    <h2>16. In welchen FÃ¤llen muss eine Variable vor ihrer Verwendung initialisiert werden?</h2>
    <pre>
- Lokale Variablen (z.â€¯B. in Methoden) mÃ¼ssen zwingend initialisiert werden.
- Felder (Attribute) in Klassen werden automatisch initialisiert.
ğŸ“˜ Lektion: 16.2 â€“ Initialisierung & Speicher | ğŸ“„ Seite: 152â€“153
    </pre>

    <h2>17. Was bedeutet static bei Attributen und Methoden?</h2>
    <pre>
- static bedeutet: gehÃ¶rt zur Klasse, nicht zu einem einzelnen Objekt
- static Methoden kÃ¶nnen ohne Objekt aufgerufen werden
- Kein Zugriff auf this innerhalb von static Methoden
ğŸ“˜ Lektion: 18.3 â€“ Klassenelemente: static | ğŸ“„ Seite: 174â€“175
    </pre>

    <h2>18. Was bedeutet Ãœberladung?</h2>
    <pre>
- Methoden gelten als Ã¼berladen, wenn sie denselben Namen, aber unterschiedliche Parameterlisten haben.
- Dies erlaubt verschiedene EingabemÃ¶glichkeiten (z.â€¯B. unterschiedliche Datentypen oder Parameteranzahl).
Beispiel:
void drucke(String s) {}
void drucke(int i) {}
ğŸ“˜ Lektion: 20.2 â€“ MethodenÃ¼berladung | ğŸ“„ Seite: 202â€“203
    </pre>

    <!-- Navigation -->
    <div class="button-container">
        <a href="OOP_FragenAntwortenBlock_B.html" class="nav-button">ğŸ”™ ZurÃ¼ck zu Block B</a>
	<a href="index.html" class="nav-button">ğŸ’¡ ZurÃ¼ck zur Ãœbersicht</a>
        <a href="OOP_FragenAntwortenBlock_D.html" class="nav-button">Weiter zu Block D ğŸ”œ</a>
    </div>

</div>

</body>
</html>
